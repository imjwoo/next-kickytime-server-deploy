name: ECS - Deploy

on:
  workflow_run:
    workflows: ["ECR - Build & Push"]   # ECR 워크플로우 name과 정확히 일치
    types: [completed]
    branches: [develop]                  # develop에서 완료된 빌드만 트리거
  workflow_dispatch:

concurrency:
  group: ecs-develop
  cancel-in-progress: false

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: kickytime-repo        # ECR 리포 이름
  ECS_CLUSTER: kickytime-cluster        # ECS 클러스터 이름
  ECS_SERVICE: kickytime-task-service   # ECS 서비스 이름
  TASK_FAMILY: kickytime-task           # 태스크 정의 패밀리
  CONTAINER_NAME: kickytime-ecr         # TD 안 컨테이너 이름(정확히 일치)

jobs:
  deploy:
    # 🔒 workflow_run이 성공 + develop 브랜치일 때만 실행
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'develop'
      }}
    runs-on: ubuntu-latest
    env:
      HEAD_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      # 🔍 디버그: workflow_run 이벤트 정보 출력
      - name: Debug workflow_run event
        run: |
          echo "=== Workflow Run Event Debug ==="
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Event: ${{ github.event.workflow_run.event }}"
          echo "Workflow Name: ${{ github.event.workflow_run.name }}"
          echo "Workflow ID: ${{ github.event.workflow_run.id }}"

      - name: Checkout same commit (from ECR build)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_SHA }}

      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 🏷️ ECR과 동일한 태그(빌드 커밋 SHA 12자리)로 이미지 URI 구성
      - name: Compute IMAGE_URI (same tag as ECR)
        id: tag
        run: |
          TAG=${HEAD_SHA::12}
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${TAG}" >> $GITHUB_OUTPUT
          echo "Using HEAD_SHA: ${HEAD_SHA}"
          echo "Tag: $TAG"

      - name: Describe current Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query 'taskDefinition' > td.json

      # 🧩 ARM64 플랫폼 보장 + 컨테이너 이미지 교체 (기타 메타 필드 제거)
      - name: Patch image & ensure ARM64 platform (keep env/secrets)
        run: |
          jq --arg NAME "${{ env.CONTAINER_NAME }}" --arg IMG "${{ steps.tag.outputs.IMAGE_URI }}" '
            .containerDefinitions |= map(if .name == $NAME then .image = $IMG else . end)
            | .runtimePlatform = {
                "cpuArchitecture": "ARM64",
                "operatingSystemFamily": "LINUX"
              }
            | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)
          ' td.json > td-new.json

      - name: Verify Task Definition content
        run: |
          echo "=== Task Definition Platform & Container Info ==="
          jq '.runtimePlatform' td-new.json
          jq '.containerDefinitions[] | {name: .name, image: .image, cpu: .cpu, memory: .memory}' td-new.json

      - name: Register new Task Definition
        id: register
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td-new.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$NEW_TD_ARN" >> $GITHUB_OUTPUT
          echo "New TD (ARM64): $NEW_TD_ARN"

      - name: Update service (rolling deployment)
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${{ steps.register.outputs.TASK_DEF_ARN }}" \
            --force-new-deployment

      - name: Wait for deployment (with timeout)
        id: wait_deploy
        continue-on-error: true
        run: |
          timeout 600 aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" || echo "WAIT_FAILED=true" >> $GITHUB_OUTPUT

      - name: Debug failed deployment
        if: steps.wait_deploy.outputs.WAIT_FAILED == 'true'
        run: |
          echo "🔍 Deployment failed, collecting debug info..."
          echo "=== Service Description ==="
          aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"
          echo "=== Recent Tasks ==="
          aws ecs list-tasks \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service-name "${{ env.ECS_SERVICE }}" \
            --max-items 5 \
            --query 'taskArns[]' --output text | \
          xargs -I {} aws ecs describe-tasks \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --tasks {} \
            --query 'tasks[0].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus,StoppedReason:stoppedReason,Platform:runtimePlatform}'
          echo "=== Service Events ==="
          aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --query 'services[0].events[:10]'

      - name: Check task definition details
        if: steps.wait_deploy.outputs.WAIT_FAILED == 'true'
        run: |
          echo "=== Task Definition Details ==="
          aws ecs describe-task-definition \
            --task-definition "${{ steps.register.outputs.TASK_DEF_ARN }}" \
            --query 'taskDefinition.{
              Family: family,
              Revision: revision,
              Cpu: cpu,
              Memory: memory,
              Platform: runtimePlatform,
              Containers: containerDefinitions[].{
                Name: name,
                Image: image,
                Cpu: cpu,
                Memory: memory,
                Essential: essential,
                PortMappings: portMappings,
                HealthCheck: healthCheck
              }
            }'

      - name: Rollback on failure
        if: steps.wait_deploy.outputs.WAIT_FAILED == 'true'
        run: |
          echo "🔄 Rolling back to previous task definition..."
          PREV_TD=$(aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "Rolling back to: $PREV_TD"
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "$PREV_TD"

      - name: Final status and summary
        run: |
          if [ "${{ steps.wait_deploy.outputs.WAIT_FAILED }}" == "true" ]; then
            echo "### ❌ ECS Deploy Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the debug output above for details." >> $GITHUB_STEP_SUMMARY
            echo "- Issue: Likely ARM64 architecture mismatch or service constraints" >> $GITHUB_STEP_SUMMARY
            echo "- Next step: Verify ECR build uses ARM64 platform and service health" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ ECS Deploy Completed (ARM64)" >> $GITHUB_STEP_SUMMARY
            echo "- Cluster: \`${{ env.ECS_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Service: \`${{ env.ECS_SERVICE }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- TD: \`${{ steps.register.outputs.TASK_DEF_ARN }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Image: \`${{ steps.tag.outputs.IMAGE_URI }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Platform: \`ARM64/LINUX\`" >> $GITHUB_STEP_SUMMARY
