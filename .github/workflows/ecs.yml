name: ECS - Deploy

on:
  workflow_run:
    workflows: ["ECR - Build & Push"]
    types: [completed]
    branches: [develop]          # develop 빌드만 받기
  workflow_dispatch:

concurrency:
  group: ecs-develop
  cancel-in-progress: false

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: kickytime-repo
  ECS_CLUSTER: kickytime-cluster
  ECS_SERVICE: kickytime-task-service
  TASK_FAMILY: kickytime-task
  CONTAINER_NAME: kickytime-ecr

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HEAD_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Debug workflow_run event
        run: |
          echo "=== Workflow Run Event Debug ==="
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Event: ${{ github.event.workflow_run.event }}"
          echo "Workflow Name: ${{ github.event.workflow_run.name }}"
          echo "Workflow ID: ${{ github.event.workflow_run.id }}"

      # 결론/브랜치 확인으로 배포 여부 결정
      - name: Check if should deploy
        id: should_deploy
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ] && \
             [ "${{ github.event.workflow_run.head_branch }}" = "develop" ]; then
            echo "SHOULD_DEPLOY=true" >> $GITHUB_OUTPUT
            echo "✅ Will deploy"
          else
            echo "SHOULD_DEPLOY=false" >> $GITHUB_OUTPUT
            echo "⛔ Skipping deploy"
          fi

      - name: Checkout same commit (from ECR build)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_SHA }}

      - name: Configure AWS credentials (Access Keys)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Compute IMAGE_URI (same tag as ECR)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        id: tag
        run: |
          TAG=${HEAD_SHA::12}
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${TAG}" >> $GITHUB_OUTPUT
          echo "Using HEAD_SHA: ${HEAD_SHA}"
          echo "Tag: $TAG"

      - name: Describe current Task Definition
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query 'taskDefinition' > td.json

      - name: Patch image & ensure ARM64 platform (keep env/secrets)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: |
          jq --arg NAME "${{ env.CONTAINER_NAME }}" --arg IMG "${{ steps.tag.outputs.IMAGE_URI }}" '
            .containerDefinitions |= map(if .name == $NAME then .image = $IMG else . end)
            | .runtimePlatform = {"cpuArchitecture":"ARM64","operatingSystemFamily":"LINUX"}
            | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)
          ' td.json > td-new.json

      - name: Verify Task Definition content
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: |
          echo "=== Task Definition Platform & Container Info ==="
          jq '.runtimePlatform' td-new.json
          jq '.containerDefinitions[] | {name: .name, image: .image, cpu: .cpu, memory: .memory}' td-new.json

      - name: Register new Task Definition
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        id: register
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td-new.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$NEW_TD_ARN" >> $GITHUB_OUTPUT
          echo "New TD (ARM64): $NEW_TD_ARN"

      - name: Update service (rolling deployment)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${{ steps.register.outputs.TASK_DEF_ARN }}" \
            --force-new-deployment

      - name: Wait for deployment (with timeout)
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        id: wait_deploy
        continue-on-error: true
        run: |
          timeout 600 aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" || echo "WAIT_FAILED=true" >> $GITHUB_OUTPUT

      - name: Debug failed deployment
        if: steps.wait_deploy.outputs.WAIT_FAILED == 'true'
        run: |
          echo "🔍 Deployment failed, collecting debug info..."
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}"
          aws ecs list-tasks --cluster "${{ env.ECS_CLUSTER }}" --service-name "${{ env.ECS_SERVICE }}" --max-items 5 --query 'taskArns[]' --output text | \
          xargs -I {} aws ecs describe-tasks --cluster "${{ env.ECS_CLUSTER }}" --tasks {} \
            --query 'tasks[0].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus,StoppedReason:stoppedReason,Platform:runtimePlatform}'
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}" --query 'services[0].events[:10]'

      - name: Final status and summary
        if: steps.should_deploy.outputs.SHOULD_DEPLOY == 'true'
        run: |
          if [ "${{ steps.wait_deploy.outputs.WAIT_FAILED }}" == "true" ]; then
            echo "### ❌ ECS Deploy Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ ECS Deploy Completed (ARM64)" >> $GITHUB_STEP_SUMMARY
          fi
